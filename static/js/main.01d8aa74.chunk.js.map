{"version":3,"sources":["Game.js","App.js","reportWebVitals.js","index.js"],"names":["Game","charts","useState","Array","fill","map","numPoints","data","price","i","open","Math","random","close","high","max","low","min","push","date","concat","generateCandlestickData","currentChartIndex","setCurrentChartIndex","userLines","setUserLines","support","resistance","correctLines","setCorrectLines","selectedLine","setSelectedLine","gameState","setGameState","scores","setScores","feedback","setFeedback","chartRef","useRef","useEffect","prices","flatMap","d","calculateSupportResistance","checkLineAccuracy","lineType","value","correctValue","accuracy","abs","feedbackMessage","calculateScore","line","round","_jsxs","style","padding","children","_jsx","fontSize","fontWeight","marginBottom","onClick","marginRight","ref","e","current","rect","getBoundingClientRect","y","clientY","top","chartHeight","height","minY","maxY","clickedPrice","prev","slice","LineChart","width","XAxis","dataKey","YAxis","domain","Tooltip","Line","type","stroke","dot","index","ReferenceLine","marginTop","border","borderRadius","moveToNextChart","chartScore","disabled","length","reduce","a","b","toFixed","join","resetGame","App","className","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","React","StrictMode"],"mappings":"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","file":"static/js/main.01d8aa74.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { LineChart, Line, XAxis, YAxis, Tooltip, ReferenceLine } from 'recharts';\n\nconst generateCandlestickData = (numPoints) => {\n  const data = [];\n  let price = 100;\n  for (let i = 0; i < numPoints; i++) {\n    const open = price + Math.random() * 10 - 5;\n    const close = open + Math.random() * 10 - 5;\n    const high = Math.max(open, close) + Math.random() * 5;\n    const low = Math.min(open, close) - Math.random() * 5;\n    data.push({ date: `Day ${i + 1}`, open, close, high, low });\n    price = close;\n  }\n  return data;\n};\n\nconst calculateSupportResistance = (data) => {\n  const prices = data.flatMap(d => [d.high, d.low]);\n  const support = Math.min(...prices);\n  const resistance = Math.max(...prices);\n  return { support, resistance };\n};\n\nconst Game = () => {\n  const [charts] = useState(() => Array(10).fill(null).map(() => generateCandlestickData(30)));\n  const [currentChartIndex, setCurrentChartIndex] = useState(0);\n  const [userLines, setUserLines] = useState({ support: [], resistance: [] });\n  const [correctLines, setCorrectLines] = useState({ support: null, resistance: null });\n  const [selectedLine, setSelectedLine] = useState(null);\n  const [gameState, setGameState] = useState('playing');\n  const [scores, setScores] = useState([]);\n  const [feedback, setFeedback] = useState('');\n  const chartRef = useRef(null);\n\n  useEffect(() => {\n    const { support, resistance } = calculateSupportResistance(charts[currentChartIndex]);\n    setCorrectLines({ support, resistance });\n  }, [currentChartIndex, charts]);\n\n  const handleChartClick = (e) => {\n    if (!chartRef.current || !selectedLine || gameState !== 'playing') return;\n    const chartElement = chartRef.current;\n    const rect = chartElement.getBoundingClientRect();\n    const y = e.clientY - rect.top;\n    const chartHeight = rect.height;\n    const minY = Math.min(...charts[currentChartIndex].map(d => d.low));\n    const maxY = Math.max(...charts[currentChartIndex].map(d => d.high));\n    const clickedPrice = maxY - (y / chartHeight) * (maxY - minY);\n\n    setUserLines(prev => ({\n      ...prev,\n      [selectedLine]: [...prev[selectedLine].slice(0, 1), clickedPrice]\n    }));\n\n    checkLineAccuracy(selectedLine, clickedPrice);\n  };\n\n  const checkLineAccuracy = (lineType, value) => {\n    const correctValue = correctLines[lineType];\n    const diff = Math.abs(value - correctValue);\n    const maxDiff = correctLines.resistance - correctLines.support;\n    const accuracy = 1 - (diff / maxDiff);\n    \n    let feedbackMessage = '';\n    if (accuracy > 0.9) {\n      feedbackMessage = 'Excellent! Very close to the correct line.';\n    } else if (accuracy > 0.7) {\n      feedbackMessage = 'Good job! You\\'re getting close.';\n    } else if (accuracy > 0.5) {\n      feedbackMessage = 'Not bad, but there\\'s room for improvement.';\n    } else {\n      feedbackMessage = 'Try again. Look closely at the price movements.';\n    }\n\n    setFeedback(feedbackMessage);\n  };\n\n  const moveToNextChart = () => {\n    const chartScore = calculateScore();\n    setScores(prev => [...prev, chartScore]);\n\n    if (currentChartIndex === 9) {\n      setGameState('finished');\n    } else {\n      setCurrentChartIndex(prev => prev + 1);\n      setUserLines({ support: [], resistance: [] });\n      setFeedback('');\n    }\n  };\n\n  const calculateScore = () => {\n    const supportDiff = Math.min(...userLines.support.map(line => Math.abs(line - correctLines.support)));\n    const resistanceDiff = Math.min(...userLines.resistance.map(line => Math.abs(line - correctLines.resistance)));\n    const totalDiff = supportDiff + resistanceDiff;\n    const maxDiff = correctLines.resistance - correctLines.support;\n    const accuracy = 1 - (totalDiff / maxDiff);\n    return Math.round(accuracy * 100);\n  };\n\n  const resetGame = () => {\n    setCurrentChartIndex(0);\n    setUserLines({ support: [], resistance: [] });\n    setSelectedLine(null);\n    setGameState('playing');\n    setScores([]);\n    setFeedback('');\n  };\n\n  return (\n    <div style={{ padding: '1rem' }}>\n      <h1 style={{ fontSize: '1.5rem', fontWeight: 'bold', marginBottom: '1rem' }}>Support and Resistance Line Drawing Game</h1>\n      <div style={{ marginBottom: '1rem' }}>Chart {currentChartIndex + 1} of 10</div>\n      <div style={{ marginBottom: '1rem' }}>\n        <button onClick={() => setSelectedLine('support')} style={{ marginRight: '0.5rem' }}>\n          Select Support Line\n        </button>\n        <button onClick={() => setSelectedLine('resistance')}>\n          Select Resistance Line\n        </button>\n      </div>\n      <div ref={chartRef} onClick={handleChartClick}>\n        <LineChart width={600} height={400} data={charts[currentChartIndex]}>\n          <XAxis dataKey=\"date\" />\n          <YAxis domain={['auto', 'auto']} />\n          <Tooltip />\n          <Line type=\"monotone\" dataKey=\"high\" stroke=\"#8884d8\" dot={false} />\n          <Line type=\"monotone\" dataKey=\"low\" stroke=\"#82ca9d\" dot={false} />\n          {userLines.support.map((line, index) => (\n            <ReferenceLine key={`support-${index}`} y={line} stroke=\"blue\" />\n          ))}\n          {userLines.resistance.map((line, index) => (\n            <ReferenceLine key={`resistance-${index}`} y={line} stroke=\"red\" />\n          ))}\n        </LineChart>\n      </div>\n      {feedback && (\n        <div style={{ marginTop: '1rem', padding: '0.5rem', border: '1px solid #ccc', borderRadius: '4px' }}>\n          <strong>Feedback:</strong> {feedback}\n        </div>\n      )}\n      <button \n        onClick={moveToNextChart} \n        style={{ marginTop: '1rem' }}\n        disabled={userLines.support.length < 2 || userLines.resistance.length < 2}\n      >\n        Next Chart\n      </button>\n      {gameState === 'finished' && (\n        <div style={{ marginTop: '1rem', padding: '0.5rem', border: '1px solid #ccc', borderRadius: '4px' }}>\n          <h2>Game Over!</h2>\n          <p>Your average score: {(scores.reduce((a, b) => a + b, 0) / scores.length).toFixed(2)}</p>\n          <p>Scores per chart: {scores.join(', ')}</p>\n          <button onClick={resetGame}>Play Again</button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Game;\n","import React from 'react';\nimport Game from './Game';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}